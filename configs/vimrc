"打开语法高亮。自动识别代码，使用多种颜色显示
if has("syntax")
	syntax on
endif

set nu          	"显示行号
"set nonu      		"取消显示行号

set shiftwidth=4    "设置缩进的空格数为4
set tabstop=4       "设定tab长度为4
set autoindent      "设定自动缩进,下一行的缩进自动跟上一行的缩进保持一致
set cindent     	"设置使用C/C++语言的自动缩进方式
set cursorline  	"突出显示当前行

set autoread		"打开文件监视.如果在编辑过程中文件发生外部改变(比如被别的编辑器编辑了),就会发出提示

set hlsearch    	"启用高亮搜索
"set nohlsearch 	"关闭高亮搜索
set incsearch   	"查询增量模式,自动追随要查找的内容,并就自动跳到第一个匹配的结果
"set nohl 			"只取消当前的搜索高亮
set ignorecase 		"搜索忽略大小写
set smartcase 		" Do smart case matching

set noeb 			"去掉输入错误的提示声音
set laststatus=2 	"总是显示状态行

set showmode   "显示当前是处于命令模式还是插入模式
set showcmd    "显示当前输入的命令

set ruler  "在编辑过程中，在右下角显示光标位置的状态行 

"命令模式下，底部操作指令按下 Tab 键自动补全。
"  第一次按下 Tab，会显示所有匹配的操作指令的清单；
"  第二次按下 Tab，会依次选择各个指令。
set wildmenu
set wildmode=longest:list,full

" 设置在状态行显示的信息: 文件格式, 编码格式, 当前行的第几个字符, 当前行数, 文件总行数
set statusline=\ %<%F[%1*%M%*%n%R%H]%=\ %y\ %0(%{&fileformat}\ %{&encoding}\ %c:%l/%L%)\
"显示文件名：总行数，总的字符数
"set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]

"set ignorecase smartcase "搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感

"切换文件时，如果当前文件被修改，则自动保存，不再提示
set autowriteall

"语言设置
set enc=utf-8
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
set langmenu=zh_CN.UTF-8
set helplang=cn

"映射光标在窗口间移动的快捷键
nmap <C-h> <C-W>h
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-l> <C-W>l

"去掉当前高亮
nmap <C-n> :nohl<CR>

"刷新当前文件，重新载入当前文件
nmap <F5> :edit<CR>

"设置或取消paste模式
nmap <F6> :set paste<CR>
nmap <F7> :set nopaste<CR>
"set pastetoggle=<F6>

"autocomplete prompt for go whenever press dog(.)
au filetype go inoremap <buffer> . .<C-x><C-o>

"Go syntax highlighting
"This may overwrite syntax in "~/.vim/syntax/go.vim"
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_operators = 1

let g:go_fmt_autosave = 0
let g:go_fmt_command = "goimports"

"Status line types/signatures
let g:go_auto_type_info = 1

"Run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

"Map keys for most used commands.
"Ex: `\b` for building, `\r` for running and `\t` for running test.
autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
autocmd FileType go nmap <leader>r  <Plug>(go-run)
autocmd FileType go nmap <leader>t  <Plug>(go-test)

" ==== 启用 pathogen
call pathogen#infect()
syntax on
filetype plugin indent on

"============== 配置 NerdTree ============
let NERDTreeWinPos='right'  "NERDTree打开后在窗口的位置：左='left', 右='right'
let NERDTreeShowLineNumbers=1   "NERDTree显示行号
let NERDTreeWinSize=30   "NERDTree列表的宽度
let NERDChristmasTree=1  "NERD添加色彩
let NERDTreeAutoCenter=1 "光标移动超过一定距离时，是否自动将焦点调整到屏中心
nnoremap <F4> :NERDTreeToggle<CR>  "打开与关闭nerdtree快捷键映射

"============ 配置 Tagbar ===============
nmap <F2> :TagbarToggle<CR>   "设置快捷键
let g:tagbar_width = 30       "设置宽度，默认为40
autocmd VimEnter * nested :call tagbar#autoopen(1)    "打开vim时自动打开tagbar
let g:tagbar_sort = 0       "按函数在源码中出现的顺序排序（为1则按函数名称排序）
let g:tagbar_left = 1       "在左侧
"let g:tagbar_right = 1     "在右侧

"======== auto load cscope.out when file open ======
if has("cscope") && filereadable("/usr/bin/cscope")
   set csprg=/usr/bin/cscope
   set csto=0
   set cst
   set nocsverb
   " add any database in current directory
   if filereadable("cscope.out")
      cs add cscope.out
   " else add database pointed to by environment
   elseif $CSCOPE_DB != ""
      cs add $CSCOPE_DB
   endif
   set csverb
endif

"=================== cscope ====================
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

" add auther info for example.c-like files
map <F8> ms:call AddAuthor()<cr>'s
function UpdateTitle()
    normal m'
    execute '/* Last modified\s*:/s@:.*$@\=strftime(": %Y-%m-%d %H:%M:%S")@'
    normal "
    normal mk
    execute '/* Filename\s*:/s@:.*$@\=":      ".expand("%:t")@'
    execute "noh"
    normal 'k
    echohl WarningMsg | echo "Successful in updating the copy right." | echohl None
endfunction

function AddTitle()
    call append(0,"/**********************************************************")
    call append(1," * Filename:      ".expand("%:t"))
    call append(2," * Author:        sunxidong")
    call append(3," * Email:         sunxidong9999@gmail.com")
    call append(4," * Created:       ".strftime("%Y-%m-%d %H:%M:%S"))
    call append(5," * Last modified: ".strftime("%Y-%m-%d %H:%M:%S"))
    call append(6," * Description: ")
    call append(7," * *******************************************************/")
    echohl WarningMsg | echo "Successful in adding the copyright." | echohl None
endfunction

function AddAuthor()
    let n=1
    while n < 7
        let line = getline(n)
        if line =~'^\s*\*\s*\S*Last\s*modified\s*:\s*\S*.*$'
            call UpdateTitle()
            return
        endif
        let n = n + 1
    endwhile
    call AddTitle()
endfunction

" add auther info for executable shell file
map <F9> ms:call AddAuthor_S()<cr>'s    
function UpdateTitle_S()
    normal m'
    execute '/# Last modified\s*:/s@:.*$@\=strftime(": %Y-%m-%d %H:%M:%S")@'
    normal "
    normal mk
    execute '/# Filename\s*:/s@:.*$@\=":      ".expand("%:t")@'
    execute "noh"
    normal 'k
    echohl WarningMsg | echo "Successful in updating the copy right." | echohl None
endfunction

function AddTitle_S()
    call append(1,"###########################################################")
    call append(2,"# Filename:      ".expand("%:t"))
    call append(3,"# Author:        sunxidong")
    call append(4,"# Email:         sunxidong9999@gmail.com")
    call append(5,"# Created:       ".strftime("%Y-%m-%d %H:%M:%S"))
    call append(6,"# Last modified: ".strftime("%Y-%m-%d %H:%M:%S"))
    call append(7,"# Description:   ")
    call append(8,"##########################################################")
    echohl WarningMsg | echo "Successful in adding the copyright." | echohl None
endfunction

function AddAuthor_S()
    let n=1
    while n < 8
        let line = getline(n) 
        if line =~'^#\s*\S*Last\s*modified\s*:\s*\S*.*$' 
            call UpdateTitle_S() 
            return 
        endif 
        let n = n + 1 
    endwhile
    call AddTitle_S()
endfunction

" add auther info for Makefile-like file
map <F10> ms:call AddAuthor_M()<cr>'s    
function UpdateTitle_M()
    normal m'
    execute '/# Last modified\s*:/s@:.*$@\=strftime(": %Y-%m-%d %H:%M:%S")@'
    normal "
    normal mk
    execute '/# Filename\s*:/s@:.*$@\=":      ".expand("%:t")@'
    execute "noh"
    normal 'k
    echohl WarningMsg | echo "Successful in updating the copy right." | echohl None
endfunction

function AddTitle_M()
    call append(0,"###########################################################")
    call append(1,"# Filename:      ".expand("%:t"))
    call append(2,"# Author:        sunxidong")
    call append(3,"# Email:         sunxidong9999@gmail.com")
    call append(4,"# Created:       ".strftime("%Y-%m-%d %H:%M:%S"))
    call append(5,"# Last modified: ".strftime("%Y-%m-%d %H:%M:%S"))
    call append(6,"# Description:   ")
    call append(7,"##########################################################")
    echohl WarningMsg | echo "Successful in adding the copyright." | echohl None
endfunction

function AddAuthor_M()
    let n=1
    while n < 7
        let line = getline(n) 
        if line =~'^#\s*\S*Last\s*modified\s*:\s*\S*.*$' 
            call UpdateTitle_M() 
            return 
        endif 
        let n = n + 1 
    endwhile
    call AddTitle_M()
endfunction
